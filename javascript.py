import tkinter as tk
from tkinter import filedialog, messagebox
import os
from urllib.parse import urlparse
import re

# Define the output directory for "Create All Methods"
OUTPUT_DIR = r"E:\Notes\Macros\Cyber Security\Projects\scripts\JS_Downloader\output"

def _write_js_file_content(url, selected_method, filename, execute_after_download, js_file_path):
    """
    Helper function to generate and write the .js (JScript) file content.
    """
    # Sanitize filename for use within JScript strings
    sanitized_filename_for_js = filename.replace("\\", "\\\\").replace("'", "\\'")

    js_content = f'''
// JavaScript (JScript) Download Script generated by Python Tkinter App
// This script is designed to run with Windows Script Host (cscript.exe or wscript.exe)
// URL: {url}
// Method: {selected_method}
// Output File: {filename}

var url = "{url}";
var outputPath = "{sanitized_filename_for_js}";

WScript.Echo("Attempting to download '" + url + "' to '" + outputPath + "' using '" + "{selected_method}" + "'...");

try {{
'''

    if selected_method == "XMLHTTP & ADODB.Stream (Recommended)":
        js_content += f'''
    var xHttp = new ActiveXObject("Microsoft.XMLHTTP");
    var bStrm = new ActiveXObject("ADODB.Stream");

    xHttp.open("GET", url, false);
    xHttp.send();

    var adTypeBinary = 1;
    bStrm.type = adTypeBinary;
    bStrm.open();
    bStrm.write(xHttp.responseBody);
    bStrm.saveToFile(outputPath, 2); // 1 = no overwrite, 2 = overwrite
    bStrm.close();

    bStrm = null;
    xHttp = null;
'''
    elif selected_method == "WinHttp.WinHttpRequest.5.1":
        js_content += f'''
    var objHTTP = new ActiveXObject("WinHttp.WinHttpRequest.5.1");
    var objStream = new ActiveXObject("ADODB.Stream");

    objHTTP.open("GET", url, false);
    objHTTP.send();

    if (objHTTP.status == 200) {{
        objStream.open();
        objStream.type = 1; // adTypeBinary
        objStream.write(objHTTP.responseBody);
        objStream.saveToFile(outputPath, 2); // adSaveCreateOverWrite
        objStream.close();
        objStream = null;
    }} else {{
        throw "Download failed. HTTP Status: " + objHTTP.status;
    }}
    objHTTP = null;
'''
    else:
        raise ValueError(f"Unknown download method selected: {selected_method}")

    js_content += f'''
    WScript.Echo("Download complete: " + outputPath);
}} catch (e) {{
    WScript.Echo("An error occurred during download: " + e.message);
    WScript.Quit(1); // Exit with an error code
}}

'''

    # Add post-download execution
    if execute_after_download:
        js_content += f'''
// --- Execute after download ---
var fso = new ActiveXObject("Scripting.FileSystemObject");
if (fso.FileExists(outputPath)) {{
    WScript.Echo("Executing downloaded file: " + outputPath);
    try {{
        var shell = new ActiveXObject("WScript.Shell");
        shell.Run(outputPath, 1, false); // 1 for normal window, false for no wait
        shell = null;
        WScript.Echo("Execution command sent.");
    }} catch (e) {{
        WScript.Echo("Failed to execute '" + outputPath + "': " + e.message);
    }}
}} else {{
    WScript.Echo("Cannot execute: Downloaded file not found at " + outputPath + ".");
}}
'''

    # Write the content to the .js file
    with open(js_file_path, 'w') as f:
        f.write(js_content)

def generate_single_js_file():
    """
    Generates a single .js file for the selected method, prompting for save location.
    """
    url = url_entry.get()
    selected_method = method_var.get()
    execute_after_download = execute_var.get()

    if not url:
        messagebox.showwarning("Input Error", "Please enter a valid URL.")
        return

    if not (url.startswith("http://") or url.startswith("https://")):
        messagebox.showwarning("Invalid URL", "URL must start with http:// or https:// for these JScript methods.")
        return
    
    try:
        parsed_url = urlparse(url)
        path_segments = parsed_url.path.split('/')
        filename = path_segments[-1] if path_segments[-1] else "downloaded_file"
        if '.' not in filename:
            filename += ".dat"

        # Sanitize filename for Windows path compatibility
        filename = re.sub(r'[\\/:*?"<>|]', '_', filename)

        js_file_path = filedialog.asksaveasfilename(
            defaultextension=".js",
            filetypes=[("JavaScript Files", "*.js")],
            initialfile=f"download_with_{selected_method.split(' ')[0].lower()}.js",
            title="Save .js File As"
        )

        if not js_file_path:
            return

        _write_js_file_content(url, selected_method, filename, execute_after_download, js_file_path)

        messagebox.showinfo(
            "Success",
            f"'{os.path.basename(js_file_path)}' created successfully!\n"
            f"You can find it at: {js_file_path}\n\n"
            f"To run, double-click the .js file or execute from Command Prompt using 'cscript.exe {os.path.basename(js_file_path)}'."
        )

    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {e}")

def create_all_js_files():
    """
    Creates a .js file for each download method in the specified output directory.
    """
    url = url_entry.get()
    execute_after_download = execute_var.get()

    if not url:
        messagebox.showwarning("Input Error", "Please enter a valid URL to create all files.")
        return

    if not (url.startswith("http://") or url.startswith("https://")):
        messagebox.showwarning("Invalid URL", "URL must start with http:// or https:// for these JScript methods.")
        return

    try:
        # Create output directory if it doesn't exist
        os.makedirs(OUTPUT_DIR, exist_ok=True)

        parsed_url = urlparse(url)
        path_segments = parsed_url.path.split('/')
        base_filename = path_segments[-1] if path_segments[-1] else "downloaded_file"
        if '.' not in base_filename:
            base_filename += ".dat"
        
        # Sanitize base_filename for Windows path compatibility
        base_filename = re.sub(r'[\\/:*?"<>|]', '_', base_filename)

        created_files_count = 0
        failed_methods = []

        for method in download_methods:
            # Sanitize method name for filename
            sanitized_method_name = re.sub(r'[\\/:*?"<>|()]', '', method).replace(' ', '_').replace('.', '').replace('&', '')
            
            # Construct the filename for the output js file
            js_filename = f"download_{sanitized_method_name}.js"
            js_file_path = os.path.join(OUTPUT_DIR, js_filename)

            try:
                _write_js_file_content(url, method, base_filename, execute_after_download, js_file_path)
                created_files_count += 1
            except Exception as e:
                failed_methods.append(f"{method} ({e})")

        success_message = f"Successfully created {created_files_count} .js files in:\n{OUTPUT_DIR}"
        if failed_methods:
            success_message += "\n\nFailed to create files for the following methods:\n" + "\n".join(failed_methods)
            messagebox.showwarning("Partial Success", success_message)
        else:
            messagebox.showinfo("Success", success_message)

    except Exception as e:
        messagebox.showerror("Error", f"An error occurred while creating all files: {e}")

# --- GUI Setup ---
app = tk.Tk()
app.title("JavaScript (.js) Downloader Generator")
app.geometry("700x450") # Adjusted size
app.resizable(False, False)

# Configure grid for better layout
for i in range(5):
    app.grid_rowconfigure(i, weight=1)
app.grid_columnconfigure(0, weight=1)
app.grid_columnconfigure(1, weight=3)

# URL Label
url_label = tk.Label(app, text="Enter File URL:")
url_label.grid(row=0, column=0, padx=10, pady=10, sticky="e")

# URL Entry
url_entry = tk.Entry(app, width=50)
url_entry.grid(row=0, column=1, padx=10, pady=10, sticky="w")
url_entry.focus_set()

# Download Method Label
method_label = tk.Label(app, text="Select Download Method:")
method_label.grid(row=1, column=0, padx=10, pady=10, sticky="e")

# Download Method Dropdown (OptionMenu)
download_methods = [
    "XMLHTTP & ADODB.Stream (Recommended)",
    "WinHttp.WinHttpRequest.5.1"
]
method_var = tk.StringVar(app)
method_var.set(download_methods[0]) # Set default value

method_dropdown = tk.OptionMenu(app, method_var, *download_methods)
method_dropdown.config(width=40) # Adjust width
method_dropdown.grid(row=1, column=1, padx=10, pady=10, sticky="w")

# Execute After Download Checkbox
execute_var = tk.BooleanVar() # Variable to store checkbox state
execute_checkbox = tk.Checkbutton(app, text="Execute after download", variable=execute_var)
execute_checkbox.grid(row=2, column=1, padx=10, pady=5, sticky="w")

# Buttons
generate_button = tk.Button(app, text="Generate Single .JS File", command=generate_single_js_file)
generate_button.grid(row=3, column=0, columnspan=2, pady=10)

create_all_button = tk.Button(app, text="Create All Methods", command=create_all_js_files)
create_all_button.grid(row=4, column=0, columnspan=2, pady=10)

# Run the application
app.mainloop()
