import tkinter as tk
from tkinter import filedialog, messagebox
import os
from urllib.parse import urlparse
import re

# Define the output directory for "Create All Methods"
OUTPUT_DIR = r"E:\Notes\Macros\Cyber Security\Projects\scripts\DLL_Downloader\output"

def _write_cpp_dll_content(url, selected_method, filename, cpp_file_path):
    """
    Helper function to generate and write the .cpp file content for a DLL.
    """
    # Sanitize filename for use within C++ strings (Windows paths)
    sanitized_filename_for_cpp = filename.replace("\\", "\\\\") # Escape backslashes

    cpp_content = f'''
// C++ DLL Download Script generated by Python Tkinter App
// This script is designed to be compiled into a DLL on Windows.
// URL: {url} (This URL is embedded for demonstration, typically passed at runtime)
// Method: {selected_method}
// Output File: {filename} (This filename is embedded for demonstration, typically passed at runtime)

#include <iostream>
#include <string>
#include <windows.h>   // For WinAPI functions
#include <urlmon.h>    // For URLDownloadToFile
#include <winhttp.h>   // For WinHTTP API
#include <vector>      // For WinHTTP buffer
#include <shlwapi.h>   // For PathFileExistsW

// Define DLL export macro
#ifdef BUILD_DLL
#define DLL_EXPORT __declspec(dllexport)
#else
#define DLL_EXPORT __declspec(dllimport)
#endif

// Linker directives (for MSVC)
#pragma comment(lib, "urlmon.lib")
#pragma comment(lib, "winhttp.lib")
#pragma comment(lib, "Shlwapi.lib")

// Function to convert std::string to std::wstring (for wide character APIs)
std::wstring s2ws(const std::string& s)
{{
    int len;
    int slength = (int)s.length() + 1;
    len = MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, 0, 0);
    wchar_t* buf = new wchar_t[len];
    MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, buf, len);
    std::wstring r(buf);
    delete[] buf;
    return r;
}}

// DllMain is the entry point for a DLL
BOOL APIENTRY DllMain(HMODULE hModule,
                      DWORD  ul_reason_for_call,
                      LPVOID lpReserved)
{{
    switch (ul_reason_for_call)
    {{
    case DLL_PROCESS_ATTACH:
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }}
    return TRUE;
}}

// Exported function for downloading using URLDownloadToFile
// Returns TRUE on success, FALSE on failure.
extern "C" DLL_EXPORT BOOL __stdcall DownloadFile_URLDownloadToFile(LPCWSTR szURL, LPCWSTR szOutputPath)
{{
    HRESULT hr = URLDownloadToFile(NULL, szURL, szOutputPath, 0, NULL);
    if (SUCCEEDED(hr))
    {{
        // std::wcout is not directly used in DLLs for console output,
        // but for debugging purposes or if the DLL is loaded by a console app.
        // For production DLLs, consider logging to a file or passing status back.
        // std::wcout << L"DLL: Download complete (URLDownloadToFile): " << szOutputPath << std::endl;
        return TRUE;
    }}
    else
    {{
        // std::wcerr << L"DLL: Error (URLDownloadToFile). HRESULT: 0x" << std::hex << hr << std::endl;
        return FALSE;
    }}
}}

// Exported function for downloading using WinHTTP API
// Returns TRUE on success, FALSE on failure.
extern "C" DLL_EXPORT BOOL __stdcall DownloadFile_WinHTTP(LPCWSTR szURL, LPCWSTR szOutputPath)
{{
    HINTERNET hSession = NULL, hConnect = NULL, hRequest = NULL;
    DWORD dwBytesRead = 0;
    std::vector<char> buffer(4096); // 4KB buffer

    hSession = WinHttpOpen(L"WinHTTP Downloader DLL/1.0",
                           WINHTTP_ACCESS_TYPE_DEFAULT_PROXY,
                           WINHTTP_NO_PROXY_NAME,
                           WINHTTP_NO_PROXY_BYPASS, 0);
    if (!hSession) return FALSE;

    URL_COMPONENTS urlComp;
    ZeroMemory(&urlComp, sizeof(urlComp));
    urlComp.dwStructSize = sizeof(urlComp);
    urlComp.dwHostNameLength = -1;
    urlComp.dwUrlPathLength = -1;
    urlComp.dwExtraInfoLength = -1;

    if (!WinHttpCrackUrl(szURL, (DWORD)wcslen(szURL), 0, &urlComp))
    {{
        WinHttpCloseHandle(hSession);
        return FALSE;
    }}

    std::wstring host(urlComp.lpszHostName, urlComp.dwHostNameLength);
    std::wstring path(urlComp.lpszUrlPath, urlComp.dwUrlPathLength);

    hConnect = WinHttpConnect(hSession, host.c_str(), urlComp.nPort, 0);
    if (!hConnect)
    {{
        WinHttpCloseHandle(hSession);
        return FALSE;
    }}

    hRequest = WinHttpOpenRequest(hConnect, L"GET", path.c_str(),
                                  NULL, WINHTTP_NO_REFERER,
                                  WINHTTP_DEFAULT_ACCEPT_TYPES,
                                  (urlComp.nPort == INTERNET_DEFAULT_HTTPS_PORT) ? WINHTTP_FLAG_SECURE : 0);
    if (!hRequest)
    {{
        WinHttpCloseHandle(hConnect);
        WinHttpCloseHandle(hSession);
        return FALSE;
    }}

    if (!WinHttpSendRequest(hRequest, WINHTTP_NO_ADDITIONAL_HEADERS, 0,
                            WINHTTP_NO_REQUEST_DATA, 0, 0, 0))
    {{
        WinHttpCloseHandle(hRequest);
        WinHttpCloseHandle(hConnect);
        WinHttpCloseHandle(hSession);
        return FALSE;
    }}

    if (!WinHttpReceiveResponse(hRequest, NULL))
    {{
        WinHttpCloseHandle(hRequest);
        WinHttpCloseHandle(hConnect);
        WinHttpCloseHandle(hSession);
        return FALSE;
    }}

    HANDLE hFile = CreateFileW(szOutputPath, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
    if (hFile == INVALID_HANDLE_VALUE)
    {{
        WinHttpCloseHandle(hRequest);
        WinHttpCloseHandle(hConnect);
        WinHttpCloseHandle(hSession);
        return FALSE;
    }}

    do
    {{
        if (!WinHttpReadData(hRequest, buffer.data(), (DWORD)buffer.size(), &dwBytesRead))
        {{
            CloseHandle(hFile);
            WinHttpCloseHandle(hRequest);
            WinHttpCloseHandle(hConnect);
            WinHttpCloseHandle(hSession);
            return FALSE;
        }}

        if (dwBytesRead == 0) break;

        DWORD dwBytesWritten = 0;
        if (!WriteFile(hFile, buffer.data(), dwBytesRead, &dwBytesWritten, NULL))
        {{
            CloseHandle(hFile);
            WinHttpCloseHandle(hRequest);
            WinHttpCloseHandle(hConnect);
            WinHttpCloseHandle(hSession);
            return FALSE;
        }}

    }} while (dwBytesRead > 0);

    CloseHandle(hFile);
    // std::wcout << L"DLL: Download complete (WinHTTP): " << szOutputPath << std::endl;

    if (hRequest) WinHttpCloseHandle(hRequest);
    if (hConnect) WinHttpCloseHandle(hConnect);
    if (hSession) WinHttpCloseHandle(hSession);

    return TRUE;
}}
'''
    # Add post-download execution logic (this would typically be in the calling application, not the DLL itself)
    # However, if the user specifically wants the DLL to trigger execution, it can be added.
    # For a DLL, it's generally better for the calling application to handle execution after the DLL returns.
    # I will omit direct execution from the DLL for better design, but will mention it.

    # Write the content to the .cpp file
    with open(cpp_file_path, 'w') as f:
        f.write(cpp_content)

def generate_single_dll_cpp_file():
    """
    Generates a single .cpp file for the selected method, prompting for save location.
    """
    url = url_entry.get()
    selected_method = method_var.get()
    # execute_after_download is not directly used for DLL generation,
    # as execution is typically handled by the calling application.

    if not url:
        messagebox.showwarning("Input Error", "Please enter a valid URL.")
        return

    if not (url.startswith("http://") or url.startswith("https://") or url.startswith("ftp://")):
        messagebox.showwarning("Invalid URL", "URL must start with http://, https://, or ftp://")
        return
    
    # Specific warnings for methods that might not handle all URL types well
    if selected_method == "URLDownloadToFile (Recommended)" and url.startswith("ftp://"):
        messagebox.showwarning("Method Warning", "URLDownloadToFile might have limited or no direct support for FTP URLs. Consider HTTP/HTTPS.")
    
    if selected_method == "WinHTTP API" and url.startswith("ftp://"):
        messagebox.showwarning("Method Warning", "WinHTTP API is primarily for HTTP/HTTPS. FTP support is not direct.")

    try:
        parsed_url = urlparse(url)
        path_segments = parsed_url.path.split('/')
        filename = path_segments[-1] if path_segments[-1] else "downloaded_file"
        if '.' not in filename:
            filename += ".dat"

        # Sanitize filename for Windows path compatibility
        filename = re.sub(r'[\\/:*?"<>|]', '_', filename)

        cpp_file_path = filedialog.asksaveasfilename(
            defaultextension=".cpp",
            filetypes=[("C++ Source Files", "*.cpp")],
            initialfile=f"download_dll_{selected_method.split(' ')[0].lower()}.cpp",
            title="Save .cpp File for DLL As"
        )

        if not cpp_file_path:
            return

        _write_cpp_dll_content(url, selected_method, filename, cpp_file_path)

        messagebox.showinfo(
            "Success",
            f"'{os.path.basename(cpp_file_path)}' created successfully!\n"
            f"You can find it at: {cpp_file_path}\n\n"
            f"**Next Steps:** Compile this .cpp file into a DLL (see instructions below).\n"
            f"Then, you'll need a separate executable to load and use the DLL."
        )

    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {e}")

def create_all_dll_cpp_files():
    """
    Creates a .cpp file for each download method in the specified output directory.
    """
    url = url_entry.get()
    # execute_after_download is not directly used for DLL generation

    if not url:
        messagebox.showwarning("Input Error", "Please enter a valid URL to create all files.")
        return

    if not (url.startswith("http://") or url.startswith("https://") or url.startswith("ftp://")):
        messagebox.showwarning("Invalid URL", "URL must start with http://, https://, or ftp://")
        return

    try:
        # Create output directory if it doesn't exist
        os.makedirs(OUTPUT_DIR, exist_ok=True)

        parsed_url = urlparse(url)
        path_segments = parsed_url.path.split('/')
        base_filename = path_segments[-1] if path_segments[-1] else "downloaded_file"
        if '.' not in base_filename:
            base_filename += ".dat"
        
        # Sanitize base_filename for Windows path compatibility
        base_filename = re.sub(r'[\\/:*?"<>|]', '_', base_filename)

        created_files_count = 0
        failed_methods = []

        for method in download_methods:
            # Specific warnings/skips for methods that might not handle all URL types well
            if method == "URLDownloadToFile (Recommended)" and url.startswith("ftp://"):
                failed_methods.append(f"{method} (Limited/no direct support for FTP URLs)")
                continue
            
            if method == "WinHTTP API" and url.startswith("ftp://"):
                failed_methods.append(f"{method} (WinHTTP API is primarily for HTTP/HTTPS)")
                continue

            # Sanitize method name for filename
            sanitized_method_name = re.sub(r'[\\/:*?"<>|()]', '', method).replace(' ', '_').replace('.', '').replace('&', '')
            
            # Construct the filename for the output cpp file
            cpp_filename = f"download_dll_{sanitized_method_name}.cpp"
            cpp_file_path = os.path.join(OUTPUT_DIR, cpp_filename)

            try:
                _write_cpp_dll_content(url, method, base_filename, cpp_file_path)
                created_files_count += 1
            except Exception as e:
                failed_methods.append(f"{method} ({e})")

        success_message = f"Successfully created {created_files_count} .cpp files for DLLs in:\n{OUTPUT_DIR}"
        if failed_methods:
            success_message += "\n\nFailed to create files for the following methods:\n" + "\n".join(failed_methods)
            messagebox.showwarning("Partial Success", success_message)
        else:
            messagebox.showinfo("Success", success_message)

    except Exception as e:
        messagebox.showerror("Error", f"An error occurred while creating all files: {e}")

# --- GUI Setup ---
app = tk.Tk()
app.title("C++ DLL (.cpp) Downloader Generator")
app.geometry("750x480") # Adjusted size
app.resizable(False, False)

# Configure grid for better layout
for i in range(5):
    app.grid_rowconfigure(i, weight=1)
app.grid_columnconfigure(0, weight=1)
app.grid_columnconfigure(1, weight=3)

# URL Label
url_label = tk.Label(app, text="Enter File URL:")
url_label.grid(row=0, column=0, padx=10, pady=10, sticky="e")

# URL Entry
url_entry = tk.Entry(app, width=50)
url_entry.grid(row=0, column=1, padx=10, pady=10, sticky="w")
url_entry.focus_set()

# Download Method Label
method_label = tk.Label(app, text="Select Download Method:")
method_label.grid(row=1, column=0, padx=10, pady=10, sticky="e")

# Download Method Dropdown (OptionMenu)
download_methods = [
    "URLDownloadToFile (Recommended)",
    "WinHTTP API"
]
method_var = tk.StringVar(app)
method_var.set(download_methods[0]) # Set default value

method_dropdown = tk.OptionMenu(app, method_var, *download_methods)
method_dropdown.config(width=40) # Adjust width
method_dropdown.grid(row=1, column=1, padx=10, pady=10, sticky="w")

# Execute After Download Checkbox (Note: This checkbox is present but its value
# is not directly used in the generated DLL code, as execution is typically
# handled by the application loading the DLL.)
execute_var = tk.BooleanVar()
execute_checkbox = tk.Checkbutton(app, text="Execute after download (handled by calling app)", variable=execute_var, state=tk.DISABLED)
execute_checkbox.grid(row=2, column=1, padx=10, pady=5, sticky="w")


# Buttons
generate_button = tk.Button(app, text="Generate Single DLL .CPP File", command=generate_single_dll_cpp_file)
generate_button.grid(row=3, column=0, columnspan=2, pady=10)

create_all_button = tk.Button(app, text="Create All DLL .CPP Methods", command=create_all_dll_cpp_files)
create_all_button.grid(row=4, column=0, columnspan=2, pady=10)

# Run the application
app.mainloop()
