import tkinter as tk
from tkinter import filedialog, messagebox
import os
from urllib.parse import urlparse
import re

# Define the output directory for "Create All Methods"
OUTPUT_DIR = r"E:\Notes\Macros\Cyber Security\Projects\scripts\RB_Downloader\output"

def _write_rb_file_content(url, selected_method, filename, execute_after_download, rb_file_path):
    """
    Helper function to generate and write the .rb (Ruby) file content.
    """
    # Sanitize filename for use within Ruby strings (Windows paths)
    # Ruby strings can handle backslashes, but escape single quotes and backslashes for safety.
    sanitized_filename_for_rb = filename.replace("\\", "\\\\").replace("'", "\\'")

    rb_content = f'''# Ruby Download Script generated by Python Tkinter App
# This script is designed to be run with a Ruby interpreter on Windows.
# URL: {url}
# Method: {selected_method}
# Output File: {filename}

require 'open-uri'
require 'net/http'
require 'uri'

url = '{url}'
output_path = '{sanitized_filename_for_rb}'

puts "Attempting to download '#{{url}}' to '#{{output_path}}' using '{selected_method}'..."

begin
'''

    if selected_method == "Open-URI (Recommended)":
        rb_content += f'''
  # Open-URI is a simple way to open URIs, including HTTP, HTTPS, and FTP.
  # It extends Kernel#open to handle URIs.
  URI.open(url) do |remote_file|
    File.open(output_path, 'wb') do |local_file|
      local_file.write(remote_file.read)
    end
  end
'''
    elif selected_method == "Net::HTTP (Built-in)":
        rb_content += f'''
  # Net::HTTP is Ruby's built-in HTTP client library, offering more control.
  uri = URI.parse(url)
  Net::HTTP.start(uri.host, uri.port, :use_ssl => uri.scheme == 'https') do |http|
    request = Net::HTTP::Get.new(uri.request_uri)
    http.request(request) do |response|
      unless response.is_a?(Net::HTTPSuccess)
        raise "HTTP request failed: #{{response.code}} #{{response.message}}"
      end
      File.open(output_path, 'wb') do |file|
        response.read_body do |chunk|
          file.write(chunk)
        end
      end
    end
  end
'''
    elif selected_method == "Curl (via system command)":
        # Corrected: Escape Ruby's #{} interpolation for Python's f-string
        rb_content += f'''
  # Requires curl.exe to be installed and in the system's PATH.
  command = "curl.exe -L -o \\"\\#{{output_path}}\\" \\"\\#{{url}}\\" 2>&1"
  puts "Executing command: \\#{{command}}"
  system_output = `\\#{{command}}`
  
  if $?.exitstatus == 0
    puts "Curl command output:\\n\\#{{system_output}}"
  else
    raise "Curl command failed. Exit code: \\#{{$?.exitstatus}}. Output:\\n\\#{{system_output}}"
  end
'''
    elif selected_method == "Wget (via system command)":
        # Corrected: Escape Ruby's #{} interpolation for Python's f-string
        rb_content += f'''
  # Requires wget.exe to be installed and in the system's PATH.
  command = "wget.exe --no-check-certificate -O \\"\\#{{output_path}}\\" \\"\\#{{url}}\\" 2>&1"
  puts "Executing command: \\#{{command}}"
  system_output = `\\#{{command}}`

  if $?.exitstatus == 0
    puts "Wget command output:\\n\\#{{system_output}}"
  else
    raise "Wget command failed. Exit code: \\#{{$?.exitstatus}}. Output:\\n\\#{{system_output}}"
  end
'''
    else:
        raise ValueError(f"Unknown download method selected: {selected_method}")

    rb_content += f'''
  puts "Download complete: #{{output_path}}"
rescue => e
  STDERR.puts "An error occurred during download: #{{e.message}}"
  exit 1 # Exit with an error code
end

'''

    # Add post-download execution
    if execute_after_download:
        # Corrected: Escape Ruby's #{} interpolation for Python's f-string
        rb_content += f'''
# --- Execute after download ---
if File.exist?(output_path)
  puts "Executing downloaded file: \\#{{output_path}}"
  # Use 'start' command on Windows to open the file with its default application
  exec_command = "start \\"\\" \\"\\#{{output_path}}\\""
  system(exec_command)
  puts "Execution command sent."
else
  puts "Cannot execute: Downloaded file not found at \\#{{output_path}}."
end

# Pause for user to see output if run directly from command line
puts "Press Enter to exit..."
STDIN.gets # Wait for user input
'''

    # Write the content to the .rb file
    with open(rb_file_path, 'w') as f:
        f.write(rb_content)

def generate_single_rb_file():
    """
    Generates a single .rb file for the selected method, prompting for save location.
    """
    url = url_entry.get()
    selected_method = method_var.get()
    execute_after_download = execute_var.get()

    if not url:
        messagebox.showwarning("Input Error", "Please enter a valid URL.")
        return

    if not (url.startswith("http://") or url.startswith("https://") or url.startswith("ftp://")):
        messagebox.showwarning("Invalid URL", "URL must start with http://, https://, or ftp://")
        return
    
    # Specific warnings for methods that might not handle all URL types well
    if selected_method == "Net::HTTP (Built-in)" and url.startswith("ftp://"):
        messagebox.showwarning("Method Warning", "Net::HTTP is primarily for HTTP/HTTPS. FTP support is not direct.")
    
    if ("Curl" in selected_method or "Wget" in selected_method) and url.startswith("ftp://"):
        messagebox.showwarning("External Tool Warning", f"{selected_method} might have limited or no direct support for FTP URLs. Consider HTTP/HTTPS.")

    try:
        parsed_url = urlparse(url)
        path_segments = parsed_url.path.split('/')
        filename = path_segments[-1] if path_segments[-1] else "downloaded_file"
        if '.' not in filename:
            filename += ".dat"

        # Sanitize filename for Windows path compatibility
        filename = re.sub(r'[\\/:*?"<>|]', '_', filename)

        rb_file_path = filedialog.asksaveasfilename(
            defaultextension=".rb",
            filetypes=[("Ruby Scripts", "*.rb")],
            initialfile=f"download_with_{selected_method.split(' ')[0].lower()}.rb",
            title="Save .rb File As"
        )

        if not rb_file_path:
            return

        _write_rb_file_content(url, selected_method, filename, execute_after_download, rb_file_path)

        messagebox.showinfo(
            "Success",
            f"'{os.path.basename(rb_file_path)}' created successfully!\n"
            f"You can find it at: {rb_file_path}\n\n"
            f"To run, execute from your terminal using 'ruby {os.path.basename(rb_file_path)}'."
        )

    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {e}")

def create_all_rb_files():
    """
    Creates a .rb file for each download method in the specified output directory.
    """
    url = url_entry.get()
    execute_after_download = execute_var.get()

    if not url:
        messagebox.showwarning("Input Error", "Please enter a valid URL to create all files.")
        return

    if not (url.startswith("http://") or url.startswith("https://") or url.startswith("ftp://")):
        messagebox.showwarning("Invalid URL", "URL must start with http://, https://, or ftp://")
        return

    try:
        # Create output directory if it doesn't exist
        os.makedirs(OUTPUT_DIR, exist_ok=True)

        parsed_url = urlparse(url)
        path_segments = parsed_url.path.split('/')
        base_filename = path_segments[-1] if path_segments[-1] else "downloaded_file"
        if '.' not in base_filename:
            base_filename += ".dat"
        
        # Sanitize base_filename for Windows path compatibility
        base_filename = re.sub(r'[\\/:*?"<>|]', '_', base_filename)

        created_files_count = 0
        failed_methods = []

        for method in download_methods:
            # Specific warnings/skips for methods that might not handle all URL types well
            if method == "Net::HTTP (Built-in)" and url.startswith("ftp://"):
                failed_methods.append(f"{method} (Primarily for HTTP/HTTPS)")
                continue
            
            if ("Curl" in method or "Wget" in method) and url.startswith("ftp://"):
                failed_methods.append(f"{method} (Limited/no direct support for FTP URLs)")
                continue

            # Sanitize method name for filename
            sanitized_method_name = re.sub(r'[\\/:*?"<>|()]', '', method).replace(' ', '_').replace('.', '').replace('&', '')
            
            # Construct the filename for the output rb file
            rb_filename = f"download_{sanitized_method_name}.rb"
            rb_file_path = os.path.join(OUTPUT_DIR, rb_filename)

            try:
                _write_rb_file_content(url, method, base_filename, execute_after_download, rb_file_path)
                created_files_count += 1
            except Exception as e:
                failed_methods.append(f"{method} ({e})")

        success_message = f"Successfully created {created_files_count} .rb files in:\n{OUTPUT_DIR}"
        if failed_methods:
            success_message += "\n\nFailed to create files for the following methods:\n" + "\n".join(failed_methods)
            messagebox.showwarning("Partial Success", success_message)
        else:
            messagebox.showinfo("Success", success_message)

    except Exception as e:
        messagebox.showerror("Error", f"An error occurred while creating all files: {e}")

# --- GUI Setup ---
app = tk.Tk()
app.title("Ruby (.rb) Downloader Generator")
app.geometry("750x480") # Adjusted size
app.resizable(False, False)

# Configure grid for better layout
for i in range(5):
    app.grid_rowconfigure(i, weight=1)
app.grid_columnconfigure(0, weight=1)
app.grid_columnconfigure(1, weight=3)

# URL Label
url_label = tk.Label(app, text="Enter File URL:")
url_label.grid(row=0, column=0, padx=10, pady=10, sticky="e")

# URL Entry
url_entry = tk.Entry(app, width=50)
url_entry.grid(row=0, column=1, padx=10, pady=10, sticky="w")
url_entry.focus_set()

# Download Method Label
method_label = tk.Label(app, text="Select Download Method:")
method_label.grid(row=1, column=0, padx=10, pady=10, sticky="e")

# Download Method Dropdown (OptionMenu)
download_methods = [
    "Open-URI (Recommended)",
    "Net::HTTP (Built-in)",
    "Curl (via system command)",
    "Wget (via system command)"
]
method_var = tk.StringVar(app)
method_var.set(download_methods[0]) # Set default value

method_dropdown = tk.OptionMenu(app, method_var, *download_methods)
method_dropdown.config(width=40) # Adjust width
method_dropdown.grid(row=1, column=1, padx=10, pady=10, sticky="w")

# Execute After Download Checkbox
execute_var = tk.BooleanVar() # Variable to store checkbox state
execute_checkbox = tk.Checkbutton(app, text="Execute after download", variable=execute_var)
execute_checkbox.grid(row=2, column=1, padx=10, pady=5, sticky="w")

# Buttons
generate_button = tk.Button(app, text="Generate Single .RB File", command=generate_single_rb_file)
generate_button.grid(row=3, column=0, columnspan=2, pady=10)

create_all_button = tk.Button(app, text="Create All Methods", command=create_all_rb_files)
create_all_button.grid(row=4, column=0, columnspan=2, pady=10)

# Run the application
app.mainloop()
