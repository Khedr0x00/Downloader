import tkinter as tk
from tkinter import filedialog, messagebox
import os
from urllib.parse import urlparse
import re

# Define the output directory for "Create All Methods"
OUTPUT_DIR = r"E:\Notes\Macros\Cyber Security\Projects\scripts\PY_Downloader\output"

def _write_py_file_content(url, selected_method, filename, execute_after_download, py_file_path):
    """
    Helper function to generate and write the .py file content.
    """
    # Sanitize filename for use within Python strings
    sanitized_filename_for_py = filename.replace("\\", "\\\\").replace("'", "\\'")

    py_content = f'''
# Python Download Script generated by Python Tkinter App
# URL: {url}
# Method: {selected_method}
# Output File: {filename}

import os
import sys
import subprocess

url = r'{url}'
output_path = r'{sanitized_filename_for_py}'

print(f"Attempting to download '{{url}}' to '{{output_path}}' using '{selected_method}'...")

try:
'''

    if selected_method == "requests (Recommended)":
        py_content += f'''
    try:
        import requests
    except ImportError:
        print("requests library not found. Installing...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "requests"])
        import requests

    response = requests.get(url, stream=True)
    response.raise_for_status() # Raise an exception for bad status codes

    with open(output_path, 'wb') as f:
        for chunk in response.iter_content(chunk_size=8192):
            f.write(chunk)
'''
    elif selected_method == "urllib.request (Built-in)":
        py_content += f'''
    import urllib.request

    urllib.request.urlretrieve(url, output_path)
'''
    elif selected_method == "wget (via subprocess)":
        py_content += f'''
    # This method requires wget to be installed on the system and in the PATH.
    # On Windows, you might need to download wget.exe and place it in a directory
    # included in your system's PATH environment variable.
    command = ['wget', '--no-check-certificate', '-O', output_path, url]
    
    # Use subprocess.run for better error handling and output capture
    result = subprocess.run(command, capture_output=True, text=True, check=True)
    print(result.stdout)
    if result.stderr:
        print("wget stderr:", result.stderr)
'''
    elif selected_method == "curl (via subprocess)":
        py_content += f'''
    # This method uses the curl.exe utility, which is built into Windows 10 and later.
    # On older Windows versions, you might need to install curl.
    command = ['curl', '-L', '-o', output_path, url]
    
    result = subprocess.run(command, capture_output=True, text=True, check=True)
    print(result.stdout)
    if result.stderr:
        print("curl stderr:", result.stderr)
'''
    else:
        raise ValueError(f"Unknown download method selected: {selected_method}")

    py_content += f'''
    print(f"Download complete: {{output_path}}")
except Exception as e:
    print(f"An error occurred during download: {{e}}")
    sys.exit(1) # Exit with an error code

'''

    # Add post-download execution
    if execute_after_download:
        py_content += f'''
# --- Execute after download ---
if os.path.exists(output_path):
    print(f"Executing downloaded file: {{output_path}}")
    try:
        if sys.platform == "win32":
            os.startfile(output_path)
        elif sys.platform == "darwin": # macOS
            subprocess.run(["open", output_path])
        else: # Linux
            subprocess.run(["xdg-open", output_path])
        print("Execution command sent.")
    except Exception as e:
        print(f"Failed to execute '{{output_path}}': {{e}}")
else:
    print(f"Cannot execute: Downloaded file not found at {{output_path}}.")
'''

    # Write the content to the .py file
    with open(py_file_path, 'w') as f:
        f.write(py_content)

def generate_single_py_file():
    """
    Generates a single .py file for the selected method, prompting for save location.
    """
    url = url_entry.get()
    selected_method = method_var.get()
    execute_after_download = execute_var.get()

    if not url:
        messagebox.showwarning("Input Error", "Please enter a valid URL.")
        return

    if not (url.startswith("http://") or url.startswith("https://") or url.startswith("ftp://")):
        messagebox.showwarning("Invalid URL", "URL must start with http://, https://, or ftp://")
        return
    
    # Specific warnings for methods that might not handle all URL types well
    if ("requests" in selected_method or "urllib.request" in selected_method) and url.startswith("ftp://"):
        messagebox.showwarning("Method Warning", f"{selected_method} might have limited or no direct support for FTP URLs. Consider a dedicated FTP library or HTTP/HTTPS.")
    
    if ("wget" in selected_method or "curl" in selected_method) and url.startswith("ftp://"):
        messagebox.showwarning("External Tool Warning", f"{selected_method} might have limited or no direct support for FTP URLs. Consider HTTP/HTTPS.")

    try:
        parsed_url = urlparse(url)
        path_segments = parsed_url.path.split('/')
        filename = path_segments[-1] if path_segments[-1] else "downloaded_file"
        if '.' not in filename:
            filename += ".dat"

        # Sanitize filename for Windows path compatibility
        filename = re.sub(r'[\\/:*?"<>|]', '_', filename)

        py_file_path = filedialog.asksaveasfilename(
            defaultextension=".py",
            filetypes=[("Python Scripts", "*.py")],
            initialfile=f"download_with_{selected_method.split(' ')[0].lower()}.py",
            title="Save .py File As"
        )

        if not py_file_path:
            return

        _write_py_file_content(url, selected_method, filename, execute_after_download, py_file_path)

        messagebox.showinfo(
            "Success",
            f"'{os.path.basename(py_file_path)}' created successfully!\n"
            f"You can find it at: {py_file_path}\n\n"
            f"To run, execute from your terminal using 'python {os.path.basename(py_file_path)}'."
        )

    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {e}")

def create_all_py_files():
    """
    Creates a .py file for each download method in the specified output directory.
    """
    url = url_entry.get()
    execute_after_download = execute_var.get()

    if not url:
        messagebox.showwarning("Input Error", "Please enter a valid URL to create all files.")
        return

    if not (url.startswith("http://") or url.startswith("https://") or url.startswith("ftp://")):
        messagebox.showwarning("Invalid URL", "URL must start with http://, https://, or ftp://")
        return

    try:
        # Create output directory if it doesn't exist
        os.makedirs(OUTPUT_DIR, exist_ok=True)

        parsed_url = urlparse(url)
        path_segments = parsed_url.path.split('/')
        base_filename = path_segments[-1] if path_segments[-1] else "downloaded_file"
        if '.' not in base_filename:
            base_filename += ".dat"
        
        # Sanitize base_filename for Windows path compatibility
        base_filename = re.sub(r'[\\/:*?"<>|]', '_', base_filename)

        created_files_count = 0
        failed_methods = []

        for method in download_methods:
            # Specific warnings/skips for methods that might not handle all URL types well
            if ("requests" in method or "urllib.request" in method) and url.startswith("ftp://"):
                failed_methods.append(f"{method} (Limited/no direct support for FTP URLs)")
                continue
            
            if ("wget" in method or "curl" in method) and url.startswith("ftp://"):
                failed_methods.append(f"{method} (Limited/no direct support for FTP URLs)")
                continue

            # Sanitize method name for filename
            sanitized_method_name = re.sub(r'[\\/:*?"<>|()]', '', method).replace(' ', '_').replace('.', '').replace('&', '')
            
            # Construct the filename for the output py file
            py_filename = f"download_{sanitized_method_name}.py"
            py_file_path = os.path.join(OUTPUT_DIR, py_filename)

            try:
                _write_py_file_content(url, method, base_filename, execute_after_download, py_file_path)
                created_files_count += 1
            except Exception as e:
                failed_methods.append(f"{method} ({e})")

        success_message = f"Successfully created {created_files_count} .py files in:\n{OUTPUT_DIR}"
        if failed_methods:
            success_message += "\n\nFailed to create files for the following methods:\n" + "\n".join(failed_methods)
            messagebox.showwarning("Partial Success", success_message)
        else:
            messagebox.showinfo("Success", success_message)

    except Exception as e:
        messagebox.showerror("Error", f"An error occurred while creating all files: {e}")

# --- GUI Setup ---
app = tk.Tk()
app.title("Python (.py) Downloader Generator")
app.geometry("700x450") # Adjusted size
app.resizable(False, False)

# Configure grid for better layout
for i in range(5):
    app.grid_rowconfigure(i, weight=1)
app.grid_columnconfigure(0, weight=1)
app.grid_columnconfigure(1, weight=3)

# URL Label
url_label = tk.Label(app, text="Enter File URL:")
url_label.grid(row=0, column=0, padx=10, pady=10, sticky="e")

# URL Entry
url_entry = tk.Entry(app, width=50)
url_entry.grid(row=0, column=1, padx=10, pady=10, sticky="w")
url_entry.focus_set()

# Download Method Label
method_label = tk.Label(app, text="Select Download Method:")
method_label.grid(row=1, column=0, padx=10, pady=10, sticky="e")

# Download Method Dropdown (OptionMenu)
download_methods = [
    "requests (Recommended)",
    "urllib.request (Built-in)",
    "wget (via subprocess)",
    "curl (via subprocess)"
]
method_var = tk.StringVar(app)
method_var.set(download_methods[0]) # Set default value

method_dropdown = tk.OptionMenu(app, method_var, *download_methods)
method_dropdown.config(width=40) # Adjust width
method_dropdown.grid(row=1, column=1, padx=10, pady=10, sticky="w")

# Execute After Download Checkbox
execute_var = tk.BooleanVar() # Variable to store checkbox state
execute_checkbox = tk.Checkbutton(app, text="Execute after download", variable=execute_var)
execute_checkbox.grid(row=2, column=1, padx=10, pady=5, sticky="w")

# Buttons
generate_button = tk.Button(app, text="Generate Single .PY File", command=generate_single_py_file)
generate_button.grid(row=3, column=0, columnspan=2, pady=10)

create_all_button = tk.Button(app, text="Create All Methods", command=create_all_py_files)
create_all_button.grid(row=4, column=0, columnspan=2, pady=10)

# Run the application
app.mainloop()
